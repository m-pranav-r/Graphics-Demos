#version 450

struct InstanceData{
	vec3 pos;
	float scale;
};

layout(binding = 0, std140) buffer Instances{
	InstanceData instances[];
};

struct IndexedInstanceCommand{
	uint indexCount;
	uint instanceCount;
	uint firstIndex;
	uint vertexOffset;
	uint firstInstance;
};

layout(binding = 1, std430) buffer IndirectDraws{
	IndexedInstanceCommand indirectDraws[];
};

layout(binding = 2) uniform UBO {
	mat4 model;
	mat4 view;
	mat4 proj;
	vec4 frustum[6];
} ubo;

layout(binding = 3) buffer ComputeStats{
	uint drawCount;
} computeStats;

layout(local_size_x = 16) in;

bool frustumCheck(vec4 pos){
	for(int i = 0; i < 6; i++){
		if(dot(pos, ubo.frustum[i]) + 1.0 < 0.0){
			return false;
		}
	}
	return true;
}

void main(){
	uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	
	vec4 pos = vec4(instances[idx].pos.xyz, 1.0);
	
	if(frustumCheck(pos)){
		indirectDraws[idx].instanceCount = 1;
		atomicAdd(computeStats.drawCount, 1);
	} else {
		indirectDraws[idx].instanceCount = 0;
	}
}